<?php
namespace Bonnier\Admin;

use Bonnier\HttpResponse;
use Bonnier\RESTBase;

abstract class BonnierAdminBase extends RESTBase {

	const SERVICE_URL = 'https://bonnier-admin.herokuapp.com/';
	const SIGNED_REQUEST_ALGORITHM = 'HMAC-SHA256';

	private $accessToken, $appId, $appSecret, $user, $signedRequest;

	public function __construct($appId, $appSecret) {
		parent::__construct();

		$this->appId = $appId;
		$this->appSecret = $appSecret;
	}

	protected function onResponseCreate(HttpResponse $response) {
		return $response;
	}

	/**
	 * @return string
	 */
	public function getAppId() {
		return $this->appId;
	}

	/**
	 * @param string $appId
	 */
	public function setAppId($appId) {
		$this->appId = $appId;
	}

	/**
	 * @return string
	 */
	public function getAppSecret() {
		return $this->appSecret;
	}

	/**
	 * @param string $appSecret
	 */
	public function setAppSecret($appSecret) {
		$this->appSecret = $appSecret;
	}

	/*protected function getServiceUrl() {
		return 'https://bonnier-admin.herokuapp.com/api/users/current.json'; // TODO: Change the autogenerated stub
	}*/

	public function getApplicationAccessToken() {
		return $this->appId . '|' . $this->appSecret;
	}

	public function getAccessToken() {
		if(!$this->accessToken) {
			$params = array(
				'grant_type' => 'client_credentials',
				'client_id' => $this->appId,
				'client_secret' => $this->appSecret
			);

			$response = $this->api('oauth/token', self::METHOD_POST, $params);

			if($response->getStatusCode() == 200) {
				$result = json_decode($response->getResponse());
				if($result->access_token) {
					$this->accessToken = $result->access_token;
				}
			}
		}
		return $this->accessToken;
	}

	protected function addSignedRequest(array $data) {
		$data['algorithm'] = self::SIGNED_REQUEST_ALGORITHM;
		$data['issued_at'] = time();
		$b64 = base64_encode(json_encode($data));
		$rawSigned = hash_hmac('sha256', $b64, $this->appSecret, $raw = TRUE);
		$signed = base64_encode($rawSigned);
		return sprintf('%s.%s', $signed, $b64);
	}

	public function setAccessToken($token) {
		return $this->accessToken = $token;
	}

	protected function getSignedRequestCookieName() {
		return 'bonnier_'.$this->appId;
	}

	public function getSignedRequest() {
		if (!$this->signedRequest) {
			if (!empty($_REQUEST['signed_request'])) {
				$this->signedRequest = $this->parseSignedRequest(
					$_REQUEST['signed_request']
				);
			} else if (!empty($_COOKIE[$this->getSignedRequestCookieName()])) {
				$this->signedRequest = $this->parseSignedRequest(
					$_COOKIE[$this->getSignedRequestCookieName()]);
			}
		}
		return $this->signedRequest;
	}

	protected function getUserFromAvailableData() {
		// if a signed request is supplied, then it solely determines who the user is.
		$signed_request = $this->getSignedRequest();
		if ($signed_request) {
			if (array_key_exists('user_id', $signed_request)) {
				$user = $signed_request['user_id'];
				if($user != $this->getPersistentData('user_id')){
					$this->clearAllPersistentData();
				}
				$this->setPersistentData('user_id', $signed_request['user_id']);
				return $user;
			}
			// if the signed request didn't present a user id, then invalidate
			// all entries in any persistent store.
			$this->clearAllPersistentData();
			return 0;
		}
		$user = $this->getPersistentData('user_id', $default = 0);
		$persisted_access_token = $this->getPersistentData('access_token');
		// use access_token to fetch user id if we have a user access_token, or if
		// the cached access token has changed.
		$access_token = $this->getAccessToken();
		if ($access_token &&
		    $access_token != $this->getApplicationAccessToken() &&
		    !($user && $persisted_access_token == $access_token)) {
			$user = $this->getUserFromAccessToken();
			if ($user) {
				$this->setPersistentData('user_id', $user);
			} else {
				$this->clearAllPersistentData();
			}
		}
		return $user;
	}

	public function getUser() {
		if ($this->user !== null) {
			// we've already determined this and cached the value.
			return $this->user;
		}

		return $this->user = $this->getUserFromAvailableData();
	}

	public function getLoginUrl($redirectUri = '', $code = '') {
		$params = array('client_id' => $this->accessToken, 'redirect_uri' => $redirectUri, 'code' => $code);
		return $this->getUrl('oauth/authorize', $params);
	}

	public function getUrl($url, $params = array()) {
		$url = rtrim($this->getServiceUrl(), '/') . '/' . $url;

		if($params) {
			$url .= '?' . http_build_query($params);
		}

		return $url;
	}

	protected function getServiceUrl() {
		return self::SERVICE_URL;
	}

	/**
	 * @param string|null $url
	 * @param string $method
	 * @param array|NULL $data
	 * @throws ServiceException
	 * @return HttpResponse
	 */
	public function api($url = NULL, $method = self::METHOD_GET, array $data = NULL) {
		// TODO: get access token via persistent data (cookie, session etc)
		//$this->getAccessTokenFromPersistentData();

		/*if(!$this->accessToken) {
			$this->getAccessToken();
		}*/

		return parent::api($url, $method, $data);
	}

	/**
	 * Stores the given ($key, $value) pair, so that future calls to
	 * getPersistentData($key) return $value. This call may be in another request.
	 *
	 * @param string $key
	 * @param array $value
	 *
	 * @return void
	 */
	abstract protected function setPersistentData($key, $value);

	/**
	 * Get the data for $key, persisted by BonnierAdminBase::setPersistentData()
	 *
	 * @param string $key The key of the data to retrieve
	 * @param boolean $default The default value to return if $key is not found
	 *
	 * @return mixed
	 */
	abstract protected function getPersistentData($key, $default = false);

	/**
	 * Clear the data with $key from the persistent storage
	 *
	 * @param string $key
	 *
	 * @return void
	 */
	abstract protected function clearPersistentData($key);

	/**
	 * Clear all data from the persistent storage
	 *
	 * @return void
	 */
	abstract protected function clearAllPersistentData();

}